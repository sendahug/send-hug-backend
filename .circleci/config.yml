version: 2.1
parameters:
  run_workflow_build:
    default: false
    type: boolean

jobs:
  lint:
    docker:
      - image: cimg/python:3.9.0
        environment:
          FLASK_CONFIG: testing
          TEST_DATABASE_URL: postgresql://postgres:password@localhost:5432/test-capstone?sslmode=disable
    steps:
      - checkout
      - run: pip3 install pre-commit
      - run: pre-commit install
      - run: pre-commit run --all
  build:
    docker:
      - image: cimg/python:3.9.0
        environment:
          FLASK_CONFIG: testing
          TEST_DATABASE_URL: postgresql://postgres:password@localhost:5432/test-capstone?sslmode=disable
      - image: circleci/postgres:12.5
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: test-capstone
          POSTGRES_PASSWORD: "password"
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run: sudo apt-get update
      - run: sudo apt-get install -y postgresql-client
      - run:
          name: Install Python deps
          command: |
            pip3 install -r requirements.txt
            python3 -m pip install --upgrade pip
      - run:
          name: Install coverage and codecov
          command: |
            sudo apt-get install -y python3-pip
            sudo pip3 install coverage
            sudo pip3 install codecov
      # Dockerize installation to wait for the database to load
      # Taken from: https://support.circleci.com/hc/en-us/articles/360006773953-Race-Conditions-Wait-For-Database
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Restore database
          command: psql -h localhost -p 5432 -U postgres test-capstone < tests/capstone_db.sql
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "/usr/local/lib/python3.9/site-packages"
      - run:
          command: |
            coverage run -m unittest tests/test_app.py

# Conditionally run testing depending on branch
# Once it's done, run codecov to upload test coverage
workflows:
  test:
    when:
      or:
        - << pipeline.parameters.run_workflow_build >>
        - equal: [ live, << pipeline.git.branch >> ]
        - equal: [ staging, << pipeline.git.branch >> ]
        - equal: [ dev, << pipeline.git.branch >> ]
    jobs:
      - lint
      - build:
          post-steps:
            - run:
                command: codecov
